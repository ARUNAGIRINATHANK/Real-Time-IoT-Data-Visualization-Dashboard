# Create a line plot of Temperature and Vibration over time
p <- ggplot(df, aes(x = Timestamp)) +
geom_line(aes(y = Temperature, color = "Temperature")) +
geom_line(aes(y = Vibration, color = "Vibration")) +
labs(y = "Levels", color = "Metrics") +
theme_minimal()
ggplotly(p)
})
# Correlation plot between Temp_Change and Vib_Change
output$corrPlot <- renderPlotly({
req(data())
df <- data()
# Scatter plot for Temp_Change vs Vib_Change
p <- ggplot(df, aes(x = Temp_Change, y = Vib_Change)) +
geom_point(color = "blue", alpha = 0.6) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Correlation between Temperature Change and Vibration Change",
x = "Temperature Change",
y = "Vibration Change") +
theme_minimal()
ggplotly(p)
})
# Alert system to display high temperature and vibration values with colored output
output$alerts <- renderUI({
req(data())
df <- data()
# Filter for high temperature or vibration values based on thresholds
alerts <- df %>%
filter(Temperature > input$temp_threshold | Vibration > input$vib_threshold) %>%
select(Timestamp, Temperature, Vibration)
if (nrow(alerts) == 0) {
# Safe message if no alerts
div(style = "color: green; font-weight: bold;", "All values within safe thresholds.")
} else {
# Dynamic alert messages with color-coded output
alert_messages <- lapply(1:nrow(alerts), function(i) {
timestamp <- alerts$Timestamp[i]
temp <- alerts$Temperature[i]
vib <- alerts$Vibration[i]
# Check for specific alert type and set color
alert_color <- ifelse(temp > input$temp_threshold & vib > input$vib_threshold, "red", "orange")
# Create alert message
div(style = paste("color:", alert_color, "; font-weight: bold;"),
paste("Alert at", timestamp, "-> Temperature:", temp, "°C, Vibration:", vib))
})
# Return list of alert messages
do.call(tagList, alert_messages)
}
})
# Refresh data button to update dashboard
observeEvent(input$refresh, {
data <- reactive({
read_excel("/mnt/data/data's.xlsx")
})
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(readxl)
library(ggplot2)
library(plotly)
library(dplyr)
# Define UI for the dashboard
ui <- fluidPage(
titlePanel("IoT Real-time Data Dashboard"),
sidebarLayout(
sidebarPanel(
numericInput("temp_threshold", "Temperature Threshold", value = 80),
numericInput("vib_threshold", "Vibration Threshold", value = 5),
actionButton("refresh", "Refresh Data")
),
mainPanel(
tabsetPanel(
tabPanel("Trends", plotlyOutput("trendPlot")),
tabPanel("Correlations", plotlyOutput("corrPlot")),
tabPanel("Alerts", uiOutput("alerts"))
)
)
)
)
# Define server logic
server <- function(input, output, session) {
# Reactive expression to read data from the provided Excel file
data <- reactive({
req(input$refresh)  # Refresh data on button click
read_excel("/mnt/data/data's.xlsx")
})
# Dynamic trend plot for Temperature and Vibration over time
output$trendPlot <- renderPlotly({
req(data())
df <- data()
# Create a line plot of Temperature and Vibration over time
p <- ggplot(df, aes(x = Timestamp)) +
geom_line(aes(y = Temperature, color = "Temperature")) +
geom_line(aes(y = Vibration, color = "Vibration")) +
labs(y = "Levels", color = "Metrics") +
theme_minimal()
ggplotly(p)
})
# Correlation plot between Temp_Change and Vib_Change
output$corrPlot <- renderPlotly({
req(data())
df <- data()
# Scatter plot for Temp_Change vs Vib_Change
p <- ggplot(df, aes(x = Temp_Change, y = Vib_Change)) +
geom_point(color = "blue", alpha = 0.6) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Correlation between Temperature Change and Vibration Change",
x = "Temperature Change",
y = "Vibration Change") +
theme_minimal()
ggplotly(p)
})
# Alert system to display high temperature and vibration values with colored output
output$alerts <- renderUI({
req(data())
df <- data()
# Filter for high temperature or vibration values based on thresholds
alerts <- df %>%
filter(Temperature > input$temp_threshold | Vibration > input$vib_threshold) %>%
select(Timestamp, Temperature, Vibration)
if (nrow(alerts) == 0) {
# Safe message if no alerts
div(style = "color: green; font-weight: bold;", "All values within safe thresholds.")
} else {
# Dynamic alert messages with color-coded output
alert_messages <- lapply(1:nrow(alerts), function(i) {
timestamp <- alerts$Timestamp[i]
temp <- alerts$Temperature[i]
vib <- alerts$Vibration[i]
# Check for specific alert type and set color
alert_color <- ifelse(temp > input$temp_threshold & vib > input$vib_threshold, "red", "orange")
# Create alert message
div(style = paste("color:", alert_color, "; font-weight: bold;"),
paste("Alert at", timestamp, "-> Temperature:", temp, "°C, Vibration:", vib))
})
# Return list of alert messages
do.call(tagList, alert_messages)
}
})
# Refresh data button to update dashboard
observeEvent(input$refresh, {
data <- reactive({
read_excel("/mnt/data/data's.xlsx")
})
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("IoT Real-time Data Dashboard"),
sidebarLayout(
sidebarPanel(
numericInput("temp_threshold", "Temperature Threshold", value = 80),
numericInput("vib_threshold", "Vibration Threshold", value = 5),
actionButton("refresh", "Refresh Data")
),
mainPanel(
tabsetPanel(
tabPanel("Trends", plotlyOutput("trendPlot")),
tabPanel("Correlations", plotlyOutput("corrPlot")),
tabPanel("Alerts", uiOutput("alerts"))
)
)
)
)
# Define server logic
server <- function(input, output, session) {
# Reactive expression to read data from the provided Excel file
data <- reactive({
req(input$refresh)  # Refresh data on button click
read_excel("/mnt/data/data's.xlsx")
})
# Dynamic trend plot for Temperature and Vibration over time
output$trendPlot <- renderPlotly({
req(data())
df <- data()
# Create a line plot of Temperature and Vibration over time
p <- ggplot(df, aes(x = Timestamp)) +
geom_line(aes(y = Temperature, color = "Temperature")) +
geom_line(aes(y = Vibration, color = "Vibration")) +
labs(y = "Levels", color = "Metrics") +
theme_minimal()
ggplotly(p)
})
# Correlation plot between Temp_Change and Vib_Change
output$corrPlot <- renderPlotly({
req(data())
df <- data()
# Scatter plot for Temp_Change vs Vib_Change
p <- ggplot(df, aes(x = Temp_Change, y = Vib_Change)) +
geom_point(color = "blue", alpha = 0.6) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Correlation between Temperature Change and Vibration Change",
x = "Temperature Change",
y = "Vibration Change") +
theme_minimal()
ggplotly(p)
})
# Alert system to display high temperature and vibration values with colored output
output$alerts <- renderUI({
req(data())
df <- data()
# Filter for high temperature or vibration values based on thresholds
alerts <- df %>%
filter(Temperature > input$temp_threshold | Vibration > input$vib_threshold) %>%
select(Timestamp, Temperature, Vibration)
if (nrow(alerts) == 0) {
# Safe message if no alerts
div(style = "color: green; font-weight: bold;", "All values within safe thresholds.")
} else {
# Dynamic alert messages with color-coded output
alert_messages <- lapply(1:nrow(alerts), function(i) {
timestamp <- alerts$Timestamp[i]
temp <- alerts$Temperature[i]
vib <- alerts$Vibration[i]
# Check for specific alert type and set color
alert_color <- ifelse(temp > input$temp_threshold & vib > input$vib_threshold, "red", "orange")
# Create alert message
div(style = paste("color:", alert_color, "; font-weight: bold;"),
paste("Alert at", timestamp, "-> Temperature:", temp, "°C, Vibration:", vib))
})
# Return list of alert messages
do.call(tagList, alert_messages)
}
})
# Refresh data button to update dashboard
observeEvent(input$refresh, {
data <- reactive({
read_excel("/mnt/data/data's.xlsx")
})
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(readxl)
library(ggplot2)
library(plotly)
library(dplyr)
# Define UI for the dashboard
ui <- fluidPage(
titlePanel("IoT Real-time Data Dashboard"),
sidebarLayout(
sidebarPanel(
fileInput("file", "Upload Excel File", accept = ".xlsx"),
numericInput("temp_threshold", "Temperature Threshold", value = 80),
numericInput("vib_threshold", "Vibration Threshold", value = 5),
actionButton("refresh", "Refresh Data")
),
mainPanel(
tabsetPanel(
tabPanel("Trends", plotlyOutput("trendPlot")),
tabPanel("Correlations", plotlyOutput("corrPlot")),
tabPanel("Alerts", uiOutput("alerts"))
)
)
)
)
# Define server logic
server <- function(input, output, session) {
# Reactive expression to read data from the uploaded Excel file
data <- reactive({
req(input$file)  # Ensure the file is uploaded
read_excel(input$file$datapath)
})
# Dynamic trend plot for Temperature and Vibration over time
output$trendPlot <- renderPlotly({
req(data())
df <- data()
# Create a line plot of Temperature and Vibration over time
p <- ggplot(df, aes(x = Timestamp)) +
geom_line(aes(y = Temperature, color = "Temperature")) +
geom_line(aes(y = Vibration, color = "Vibration")) +
labs(y = "Levels", color = "Metrics") +
theme_minimal()
ggplotly(p)
})
# Correlation plot between Temp_Change and Vib_Change
output$corrPlot <- renderPlotly({
req(data())
df <- data()
# Scatter plot for Temp_Change vs Vib_Change
p <- ggplot(df, aes(x = Temp_Change, y = Vib_Change)) +
geom_point(color = "blue", alpha = 0.6) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Correlation between Temperature Change and Vibration Change",
x = "Temperature Change",
y = "Vibration Change") +
theme_minimal()
ggplotly(p)
})
# Alert system to display high temperature and vibration values with colored output
output$alerts <- renderUI({
req(data())
df <- data()
# Filter for high temperature or vibration values based on thresholds
alerts <- df %>%
filter(Temperature > input$temp_threshold | Vibration > input$vib_threshold) %>%
select(Timestamp, Temperature, Vibration)
if (nrow(alerts) == 0) {
# Safe message if no alerts
div(style = "color: green; font-weight: bold;", "All values within safe thresholds.")
} else {
# Dynamic alert messages with color-coded output
alert_messages <- lapply(1:nrow(alerts), function(i) {
timestamp <- alerts$Timestamp[i]
temp <- alerts$Temperature[i]
vib <- alerts$Vibration[i]
# Check for specific alert type and set color
alert_color <- ifelse(temp > input$temp_threshold & vib > input$vib_threshold, "red", "orange")
# Create alert message
div(style = paste("color:", alert_color, "; font-weight: bold;"),
paste("Alert at", timestamp, "-> Temperature:", temp, "°C, Vibration:", vib))
})
# Return list of alert messages
do.call(tagList, alert_messages)
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(readxl)
library(ggplot2)
library(plotly)
library(dplyr)
# Define UI for the dashboard
ui <- fluidPage(
titlePanel("IoT Real-time Data Dashboard"),
sidebarLayout(
sidebarPanel(
fileInput("file", "Upload Excel File", accept = ".xlsx"),
numericInput("temp_threshold", "Temperature Threshold", value = 80),
numericInput("vib_threshold", "Vibration Threshold", value = 5),
actionButton("refresh", "Refresh Data")
),
mainPanel(
tabsetPanel(
tabPanel("Trends", plotlyOutput("trendPlot")),
tabPanel("Correlations", plotlyOutput("corrPlot")),
tabPanel("Alerts", uiOutput("alerts"))
)
)
)
)
# Define server logic
server <- function(input, output, session) {
# Reactive expression to read data from the uploaded Excel file
data <- reactive({
req(input$file)  # Ensure the file is uploaded
read_excel(input$file$datapath)
})
# Dynamic trend plot for Temperature and Vibration over time
output$trendPlot <- renderPlotly({
req(data())
df <- data()
# Create a line plot of Temperature and Vibration over time
p <- ggplot(df, aes(x = Timestamp)) +
geom_line(aes(y = Temperature, color = "Temperature")) +
geom_line(aes(y = Vibration, color = "Vibration")) +
labs(y = "Levels", color = "Metrics") +
theme_minimal()
ggplotly(p)
})
# Correlation plot between Temp_Change and Vib_Change
output$corrPlot <- renderPlotly({
req(data())
df <- data()
# Scatter plot for Temp_Change vs Vib_Change
p <- ggplot(df, aes(x = Temp_Change, y = Vib_Change)) +
geom_point(color = "blue", alpha = 0.6) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Correlation between Temperature Change and Vibration Change",
x = "Temperature Change",
y = "Vibration Change") +
theme_minimal()
ggplotly(p)
})
# Alert system to display high temperature and vibration values with colored output
output$alerts <- renderUI({
req(data())
df <- data()
# Filter for high temperature or vibration values based on thresholds
alerts <- df %>%
filter(Temperature > input$temp_threshold | Vibration > input$vib_threshold) %>%
select(Timestamp, Temperature, Vibration)
if (nrow(alerts) == 0) {
# Safe message if no alerts
div(style = "color: green; font-weight: bold;", "All values within safe thresholds.")
} else {
# Dynamic alert messages with color-coded output
alert_messages <- lapply(1:nrow(alerts), function(i) {
timestamp <- alerts$Timestamp[i]
temp <- alerts$Temperature[i]
vib <- alerts$Vibration[i]
# Check for specific alert type and set color
alert_color <- ifelse(temp > input$temp_threshold & vib > input$vib_threshold, "red", "orange")
# Create alert message
div(style = paste("color:", alert_color, "; font-weight: bold;"),
paste("Alert at", timestamp, "-> Temperature:", temp, "°C, Vibration:", vib))
})
# Return list of alert messages
do.call(tagList, alert_messages)
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(readxl)
Factory_Performance_Data <- read_excel("B:/DEV mini project/Factory_Performance_Data.xlsx")
View(Factory_Performance_Data)
shiny::runApp('C:/Users/aruna/AppData/Local/Temp/73462871-1e1d-42ba-9773-f193522f3f4e_iot_dashboard_project.zip.f4e/iot_dashboard_project')
runApp('C:/Users/aruna/AppData/Local/Temp/73462871-1e1d-42ba-9773-f193522f3f4e_iot_dashboard_project.zip.f4e/iot_dashboard_project')
# Load necessary libraries
library(shiny)
library(plotly)
library(readxl)
library(dplyr)
# Load the dataset
file_path <- "B:/DEV mini project/Factory_Performance_Data.xlsx"
data <- read_excel(file_path)
# Convert Timestamp to a proper date-time format
data$Timestamp <- as.POSIXct(data$Timestamp, format = "%m/%d/%y %H:%M")
# Define the UI
ui <- fluidPage(
titlePanel("Visualizing Real-Time IoT Data: Insights at a Glance"),
sidebarLayout(
sidebarPanel(
selectInput("metric", "Select a Metric to Visualize:",
choices = c("Temperature (°C)", "Output Count", "Downtime (hrs)",
"Energy Consumption (kW)", "Defect Rate (%)",
"Idle Time (hrs)", "OEE (%)", "Worker Productivity (units/hr)",
"Wastage (kg)", "Carbon Emissions (kg CO2)")),
selectInput("machine", "Select a Machine:",
choices = unique(data$Machine_ID),
selected = unique(data$Machine_ID)[1]),
selectInput("shift", "Select a Shift:",
choices = c("Morning", "Afternoon", "Night"),
selected = "Morning"),
sliderInput("time_range", "Select Time Range:",
min = min(data$Timestamp),
max = max(data$Timestamp),
value = c(min(data$Timestamp), max(data$Timestamp)),
timeFormat = "%H:%M"),
actionButton("update", "Update")
),
mainPanel(
tabsetPanel(
tabPanel("Time Series Plot", plotlyOutput("time_series_plot")),
tabPanel("Summary Statistics", verbatimTextOutput("summary_stats"))
)
)
)
)
# Define the Server
server <- function(input, output, session) {
# Filter data based on user inputs
filtered_data <- reactive({
req(input$update)
data %>%
filter(Machine_ID == input$machine,
Shift == input$shift,
Timestamp >= input$time_range[1],
Timestamp <= input$time_range[2])
})
# Generate time series plot
output$time_series_plot <- renderPlotly({
req(filtered_data())
metric <- input$metric
plot_data <- filtered_data()
fig <- plot_ly(plot_data,
x = ~Timestamp,
y = as.formula(paste0("~`", metric, "`")),
type = 'scatter',
mode = 'lines+markers',
line = list(color = 'blue'))
fig <- fig %>% layout(
title = paste("Time Series Plot of", metric),
xaxis = list(title = "Timestamp"),
yaxis = list(title = metric)
)
fig
})
# Display summary statistics
output$summary_stats <- renderPrint({
req(filtered_data())
metric <- input$metric
summary_stats <- filtered_data() %>%
summarise(
Mean = mean(get(metric), na.rm = TRUE),
Median = median(get(metric), na.rm = TRUE),
SD = sd(get(metric), na.rm = TRUE),
Min = min(get(metric), na.rm = TRUE),
Max = max(get(metric), na.rm = TRUE)
)
summary_stats
})
}
# Run the application
shinyApp(ui = ui, server = server)
shiny::runApp('B:/DEV mini project')
runApp('a.R')
runApp('b.R')
runApp('b.R')
runApp('B:/DEV mini project')
runApp('B:/DEV mini project')
runApp('B:/DEV mini project')
shiny::runApp('B:/DEV mini project')
shiny::runApp('B:/DEV mini project')
runApp('B:/DEV mini project')
